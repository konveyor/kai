[build-system]
requires = ["setuptools >= 61.0"]
build-backend = "setuptools.build_meta"

[project]
name = "kai"
version = "0.0.1"
dependencies = [
  # To generate a new requirements.txt:
  #   $ pip install pip-tools
  #   $ pip-compile --allow-unsafe > requirements.txt

  # To view requirements.txt's dependencies in a tree format:
  #   $ pip install pipdeptree
  #   $ pipdeptree > deps.txt
  # (optional if you have yq installed)
  #   $ pipdeptree --json-tree | yq -P > deps.yaml

  # --- Main dependencies ---
  "aiohttp==3.8.6; python_version < '3.12'",
  "aiohttp==3.9.3; python_version >= '3.12'",
  "gitpython==3.1.43",
  "pydantic==2.8.2",
  "pydantic-settings==2.4.0",
  "requests==2.32.3",
  "pygments==2.18.0",
  "python-dateutil==2.8.2",
  "sqlalchemy==2.0.22",
  "psycopg2-binary==2.9.9",
  "ibm-generative-ai==2.2.0",
  "Jinja2==3.1.4",
  "langchain==0.3.1",
  "langchain-community==0.3.1",
  "langchain-openai==0.2.1",
  "langchain-google-genai==2.0.0",
  "langchain-aws==0.2.1",
  "langchain-experimental==0.3.2",
  "gunicorn==22.0.0",
  "tree-sitter==0.22.3",
  "tree-sitter-java==0.21.0",
  "sequoia-diff==0.0.8",
  # Fabian's fork has changes that fix some async issues in the real vcrpy
  # that are yet to be accepted
  "vcrpy @ git+https://github.com/fabianvf/vcrpy.git@httpx-async-threadpool",
  "python-dotenv==1.0.1",
  "pyyaml==6.0.1",
  "boto3==1.34.157",                                                          # Allows Amazon Bedrock to work
  "pylspclient==0.1.2",                                                       # used for talking to RPC clients over stdin/stdout

  # --- For notebook development ---
  "jupyter==1.0.0",
  "jupyterlab-quarto==0.3.5",
  "nbdev==2.3.13",

  # --- Possibly can be removed ---
  "async-timeout==4.0.3",
  "asgiref==3.7.2",
  "click==8.1.7",         # For potential CLI stuff
  "typer==0.9.0",         # For potential CLI stuff
  "loguru==0.7.2",        # For potential logging improvements
  "unidiff==0.7.5",

  "imgui[sdl2]",
]
requires-python = ">=3.11"
authors = [
  { name = "Konveyor Community", email = "konveyor-dev@googlegroups.com" },
]
description = "Konveyor AI - static code analysis driven migration to new targets via Generative AI"
readme = "README.md"
license = { file = "LICENSE" }

[project.optional-dependencies]
dev = [
  # --- Testing dependencies ---
  "coverage==7.6.0",
  "pytest==8.3.3",
  "ipdb==0.13.13",
  "mypy[mypyc]",
  "types-PyYAML",
  "types-python-dateutil",
  "types-requests",
  "types-Pygments",
]

[project.urls]
Repository = "https://www.github.com/konveyor/kai"

[tool.setuptools.packages.find]
where = ["."]
include = ["kai*", "playpen*"]
exclude = ["tests*"]
namespaces = true

[tool.mypy]
plugins = ["pydantic.mypy"]

strict = true

# follow_imports = "silent"
exclude = ['test_.*\.py$']

[tool.pydantic-mypy]
# The Pydantic mypy plugin adds an __init__ method with a signature like def
# __init__(self, field_1: Any, field_2: Any, **kwargs: Any): in order to avoid
# type errors when initializing models with types that don't match the field
# annotations. For example Model(date='2024-01-01') would raise a type error
# without this Any signature, but Pydantic has the ability to parse the string
# '2024-01-01' into a datetime.date type.

# With init_forbid_extra = True, the **kwargs are removed from the generated
# __init__ signature. With init_typed = True, the Any types for fields are
# replaced with their actual type hints.
init_forbid_extra = true
init_typed = true

# If the warn_required_dynamic_aliases plugin setting is set to True, you'll get
# a mypy error any time you use a dynamically-determined alias or alias
# generator on a model with Config.populate_by_name=False
warn_required_dynamic_aliases = true
