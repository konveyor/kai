diff --git a/pom.xml b/pom.xml
index 0e760b8..069b369 100644
--- a/pom.xml
+++ b/pom.xml
@@ -1,3 +1,4 @@
+
 <?xml version="1.0" encoding="UTF-8"?>
 <project 
     xmlns="http://maven.apache.org/POM/4.0.0" 
@@ -63,6 +64,17 @@
         </plugins>
     </build>
     <profiles>
-<!-- TODO: Add OpenShift profile here -->
+        <profile>
+            <id>native</id>
+            <activation>
+                <property>
+                    <name>native</name>
+                </property>
+            </activation>
+            <properties>
+                <skipITs>false</skipITs>
+                <quarkus.package.type>native</quarkus.package.type>
+            </properties>
+        </profile>
     </profiles>
 </project>
diff --git a/src/main/java/com/redhat/coolstore/model/InventoryEntity.java b/src/main/java/com/redhat/coolstore/model/InventoryEntity.java
index 1aa1dc9..b6e1b03 100644
--- a/src/main/java/com/redhat/coolstore/model/InventoryEntity.java
+++ b/src/main/java/com/redhat/coolstore/model/InventoryEntity.java
@@ -1,20 +1,21 @@
+
 package com.redhat.coolstore.model;
 
 import java.io.Serializable;
 
-import javax.persistence.Column;
-import javax.persistence.Entity;
-import javax.persistence.Id;
-import javax.persistence.Table;
-import javax.persistence.UniqueConstraint;
-import javax.xml.bind.annotation.XmlRootElement;
+import jakarta.persistence.Column;
+import jakarta.persistence.Entity;
+import jakarta.persistence.Id;
+import jakarta.persistence.Table;
+import jakarta.persistence.UniqueConstraint;
+import jakarta.xml.bind.annotation.XmlRootElement;
 
 @Entity
 @XmlRootElement
 @Table(name = "INVENTORY", uniqueConstraints = @UniqueConstraint(columnNames = "itemId"))
 public class InventoryEntity implements Serializable {
 
-	private static final long serialVersionUID = 7526472295622776147L; 
+    private static final long serialVersionUID = 7526472295622776147L; 
 
     @Id
     private String itemId;
@@ -36,38 +37,38 @@ public class InventoryEntity implements Serializable {
     }
 
     public String getItemId() {
-		return itemId;
-	}
+        return itemId;
+    }
 
-	public void setItemId(String itemId) {
-		this.itemId = itemId;
-	}
+    public void setItemId(String itemId) {
+        this.itemId = itemId;
+    }
 
-	public String getLocation() {
-		return location;
-	}
+    public String getLocation() {
+        return location;
+    }
 
-	public void setLocation(String location) {
-		this.location = location;
-	}
+    public void setLocation(String location) {
+        this.location = location;
+    }
 
-	public int getQuantity() {
-		return quantity;
-	}
+    public int getQuantity() {
+        return quantity;
+    }
 
-	public void setQuantity(int quantity) {
-		this.quantity = quantity;
-	}
+    public void setQuantity(int quantity) {
+        this.quantity = quantity;
+    }
 
-	public String getLink() {
-		return link;
-	}
+    public String getLink() {
+        return link;
+    }
 
-	public void setLink(String link) {
-		this.link = link;
-	}
+    public void setLink(String link) {
+        this.link = link;
+    }
 
-	@Override
+    @Override
     public String toString() {
         return "InventoryEntity [itemId=" + itemId + ", availability=" + quantity + "/" + location + " link=" + link + "]";
     }
diff --git a/src/main/java/com/redhat/coolstore/model/Order.java b/src/main/java/com/redhat/coolstore/model/Order.java
index 3793e23..25978c0 100644
--- a/src/main/java/com/redhat/coolstore/model/Order.java
+++ b/src/main/java/com/redhat/coolstore/model/Order.java
@@ -1,136 +1,136 @@
+
 package com.redhat.coolstore.model;
 
 import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.List;
 
-import javax.persistence.CascadeType;
-import javax.persistence.Column;
-import javax.persistence.Entity;
-import javax.persistence.FetchType;
-import javax.persistence.GeneratedValue;
-import javax.persistence.Id;
-import javax.persistence.JoinColumn;
-import javax.persistence.OneToMany;
-import javax.persistence.Table;
+import jakarta.persistence.CascadeType;
+import jakarta.persistence.Column;
+import jakarta.persistence.Entity;
+import jakarta.persistence.FetchType;
+import jakarta.persistence.GeneratedValue;
+import jakarta.persistence.Id;
+import jakarta.persistence.JoinColumn;
+import jakarta.persistence.OneToMany;
+import jakarta.persistence.Table;
 
 @Entity
 @Table(name = "ORDERS")
 public class Order implements Serializable {
 
-	private static final long serialVersionUID = -1L;
+    private static final long serialVersionUID = -1L;
 
-	@Id
-	@GeneratedValue
-	private long orderId;
+    @Id
+    @GeneratedValue
+    private long orderId;
 
-	private String customerName;
+    private String customerName;
 
-	private String customerEmail;
+    private String customerEmail;
 
-	private double orderValue;
+    private double orderValue;
 
-	private double retailPrice;
+    private double retailPrice;
 
-	private double discount;
+    private double discount;
 
-	private double shippingFee;
+    private double shippingFee;
 
-	private double shippingDiscount;
+    private double shippingDiscount;
 
-	@Column(name="TOTAL_PRICE")
+    @Column(name="TOTAL_PRICE")
 
-	
-	@OneToMany(fetch = FetchType.EAGER, cascade = CascadeType.ALL, orphanRemoval = true)
-	@JoinColumn(name="ORDER_ID")
-	private List<OrderItem> itemList = new ArrayList<>();
+    @OneToMany(fetch = FetchType.EAGER, cascade = CascadeType.ALL, orphanRemoval = true)
+    @JoinColumn(name="ORDER_ID")
+    private List<OrderItem> itemList = new ArrayList<>();
 
-	public Order() {}
+    public Order() {}
 
-	public long getOrderId() {
-		return orderId;
-	}
+    public long getOrderId() {
+        return orderId;
+    }
 
-	public void setOrderId(long orderId) {
-		this.orderId = orderId;
-	}
+    public void setOrderId(long orderId) {
+        this.orderId = orderId;
+    }
 
-	public String getCustomerName() {
-		return customerName;
-	}
+    public String getCustomerName() {
+        return customerName;
+    }
 
-	public void setCustomerName(String customerName) {
-		this.customerName = customerName;
-	}
+    public void setCustomerName(String customerName) {
+        this.customerName = customerName;
+    }
 
-	public String getCustomerEmail() {
-		return customerEmail;
-	}
+    public String getCustomerEmail() {
+        return customerEmail;
+    }
 
-	public void setCustomerEmail(String customerEmail) {
-		this.customerEmail = customerEmail;
-	}
+    public void setCustomerEmail(String customerEmail) {
+        this.customerEmail = customerEmail;
+    }
 
-	public double getOrderValue() {
-		return orderValue;
-	}
+    public double getOrderValue() {
+        return orderValue;
+    }
 
-	public void setOrderValue(double orderValue) {
-		this.orderValue = orderValue;
-	}
+    public void setOrderValue(double orderValue) {
+        this.orderValue = orderValue;
+    }
 
-	public double getRetailPrice() {
-		return retailPrice;
-	}
+    public double getRetailPrice() {
+        return retailPrice;
+    }
 
-	public void setRetailPrice(double retailPrice) {
-		this.retailPrice = retailPrice;
-	}
+    public void setRetailPrice(double retailPrice) {
+        this.retailPrice = retailPrice;
+    }
 
-	public double getDiscount() {
-		return discount;
-	}
+    public double getDiscount() {
+        return discount;
+    }
 
-	public void setDiscount(double discount) {
-		this.discount = discount;
-	}
+    public void setDiscount(double discount) {
+        this.discount = discount;
+    }
 
-	public double getShippingFee() {
-		return shippingFee;
-	}
+    public double getShippingFee() {
+        return shippingFee;
+    }
 
-	public void setShippingFee(double shippingFee) {
-		this.shippingFee = shippingFee;
-	}
+    public void setShippingFee(double shippingFee) {
+        this.shippingFee = shippingFee;
+    }
 
-	public double getShippingDiscount() {
-		return shippingDiscount;
-	}
+    public double getShippingDiscount() {
+        return shippingDiscount;
+    }
 
-	public void setShippingDiscount(double shippingDiscount) {
-		this.shippingDiscount = shippingDiscount;
-	}
+    public void setShippingDiscount(double shippingDiscount) {
+        this.shippingDiscount = shippingDiscount;
+    }
 
-	public void setItemList(List<OrderItem> itemList) {
-		this.itemList = itemList;
-	}
+    public void setItemList(List<OrderItem> itemList) {
+        this.itemList = itemList;
+    }
 
-	public List<OrderItem> getItemList() {
-		return itemList;
-	}
+    public List<OrderItem> getItemList() {
+        return itemList;
+    }
 
-	@Override
-	public String toString() {
-		return "Order [orderId=" + orderId
-				+ ", customerName=" + customerName
-				+ ", customerEmail=" + customerEmail
-				+ ", orderValue=" + orderValue
-				+ ", retailPrice=" + retailPrice
-				+ ", discount=" + discount
-				+ ", shippingFee=" + shippingFee
-				+ ", shippingDiscount=" + shippingDiscount
-				+ ", itemList=" + itemList 
-				+ "]";
-	}
+    @Override
+    public String toString() {
+        return "Order [orderId=" + orderId
+                + ", customerName=" + customerName
+                + ", customerEmail=" + customerEmail
+                + ", orderValue=" + orderValue
+                + ", retailPrice=" + retailPrice
+                + ", discount=" + discount
+                + ", shippingFee=" + shippingFee
+                + ", shippingDiscount=" + shippingDiscount
+                + ", itemList=" + itemList 
+                + "]";
+    }
 
 }
\ No newline at end of file
diff --git a/src/main/java/com/redhat/coolstore/model/OrderItem.java b/src/main/java/com/redhat/coolstore/model/OrderItem.java
index 2ae6af0..24d237b 100644
--- a/src/main/java/com/redhat/coolstore/model/OrderItem.java
+++ b/src/main/java/com/redhat/coolstore/model/OrderItem.java
@@ -1,48 +1,49 @@
+
 package com.redhat.coolstore.model;
 
 import java.io.Serializable;
 
-import javax.persistence.Column;
-import javax.persistence.Entity;
-import javax.persistence.GeneratedValue;
-import javax.persistence.Id;
-import javax.persistence.Table;
+import jakarta.persistence.Column;
+import jakarta.persistence.Entity;
+import jakarta.persistence.GeneratedValue;
+import jakarta.persistence.Id;
+import jakarta.persistence.Table;
 
 @Entity
 @Table(name = "ORDER_ITEMS")
 public class OrderItem implements Serializable {
-	private static final long serialVersionUID = 64565445665456666L;
+    private static final long serialVersionUID = 64565445665456666L;
 
-	@Id
-	@Column(name="ID")
-	@GeneratedValue
-	private long id;
+    @Id
+    @Column(name="ID")
+    @GeneratedValue
+    private long id;
 
-	private int quantity;
+    private int quantity;
 
-	private String productId;
+    private String productId;
 
-	public OrderItem() {}
+    public OrderItem() {}
 
-	public String getProductId() {
-		return productId;
-	}
+    public String getProductId() {
+        return productId;
+    }
 
-	public void setProductId(String productId) {
-		this.productId = productId;
-	}
+    public void setProductId(String productId) {
+        this.productId = productId;
+    }
 
-	public int getQuantity() {
-		return quantity;
-	}
+    public int getQuantity() {
+        return quantity;
+    }
 
-	public void setQuantity(int quantity) {
-		this.quantity = quantity;
-	}
+    public void setQuantity(int quantity) {
+        this.quantity = quantity;
+    }
 
-	@Override
-	public String toString() {
-		return "OrderItem [productId=" + productId + ", quantity=" + quantity + "]";
-	}
+    @Override
+    public String toString() {
+        return "OrderItem [productId=" + productId + ", quantity=" + quantity + "]";
+    }
 
-}
\ No newline at end of file
+}
diff --git a/src/main/java/com/redhat/coolstore/model/ShoppingCart.java b/src/main/java/com/redhat/coolstore/model/ShoppingCart.java
index 276b994..b52f602 100644
--- a/src/main/java/com/redhat/coolstore/model/ShoppingCart.java
+++ b/src/main/java/com/redhat/coolstore/model/ShoppingCart.java
@@ -1,115 +1,116 @@
+
 package com.redhat.coolstore.model;
 
 import java.io.Serializable;
 import java.util.ArrayList;
 import java.util.List;
 
-import javax.enterprise.context.Dependent;
+import jakarta.enterprise.context.Dependent;
 
-@Dependent
+@jakarta.enterprise.context.Dependent
 public class ShoppingCart implements Serializable {
 
-	private static final long serialVersionUID = -1108043957592113528L;
-
-	private double cartItemTotal;
-
-	private double cartItemPromoSavings;
-	
-	private double shippingTotal;
-	
-	private double shippingPromoSavings;
-	
-	private double cartTotal;
-			
-	private List<ShoppingCartItem> shoppingCartItemList = new ArrayList<ShoppingCartItem>();
-
-	public ShoppingCart() {
-		
-	}
-	
-	public List<ShoppingCartItem> getShoppingCartItemList() {
-		return shoppingCartItemList;
-	}
-
-	public void setShoppingCartItemList(List<ShoppingCartItem> shoppingCartItemList) {
-		this.shoppingCartItemList = shoppingCartItemList;
-	}
-
-	public void resetShoppingCartItemList() {
-		shoppingCartItemList = new ArrayList<ShoppingCartItem>();
-	}
-
-	public void addShoppingCartItem(ShoppingCartItem sci) {
-		
-		if ( sci != null ) {
-			
-			shoppingCartItemList.add(sci);
-			
-		}
-		
-	}
-	
-	public boolean removeShoppingCartItem(ShoppingCartItem sci) {
-		
-		boolean removed = false;
-		
-		if ( sci != null ) {
-			
-			removed = shoppingCartItemList.remove(sci);
-			
-		}
-		
-		return removed;
-		
-	}
-
-	public double getCartItemTotal() {
-		return cartItemTotal;
-	}
-
-	public void setCartItemTotal(double cartItemTotal) {
-		this.cartItemTotal = cartItemTotal;
-	}
-
-	public double getShippingTotal() {
-		return shippingTotal;
-	}
-
-	public void setShippingTotal(double shippingTotal) {
-		this.shippingTotal = shippingTotal;
-	}
-
-	public double getCartTotal() {
-		return cartTotal;
-	}
-
-	public void setCartTotal(double cartTotal) {
-		this.cartTotal = cartTotal;
-	}
-
-	public double getCartItemPromoSavings() {
-		return cartItemPromoSavings;
-	}
-
-	public void setCartItemPromoSavings(double cartItemPromoSavings) {
-		this.cartItemPromoSavings = cartItemPromoSavings;
-	}
-
-	public double getShippingPromoSavings() {
-		return shippingPromoSavings;
-	}
-
-	public void setShippingPromoSavings(double shippingPromoSavings) {
-		this.shippingPromoSavings = shippingPromoSavings;
-	}
-
-	@Override
-	public String toString() {
-		return "ShoppingCart [cartItemTotal=" + cartItemTotal
-				+ ", cartItemPromoSavings=" + cartItemPromoSavings
-				+ ", shippingTotal=" + shippingTotal
-				+ ", shippingPromoSavings=" + shippingPromoSavings
-				+ ", cartTotal=" + cartTotal + ", shoppingCartItemList="
-				+ shoppingCartItemList + "]";
-	}
+    private static final long serialVersionUID = -1108043957592113528L;
+
+    private double cartItemTotal;
+
+    private double cartItemPromoSavings;
+    
+    private double shippingTotal;
+    
+    private double shippingPromoSavings;
+    
+    private double cartTotal;
+            
+    private List<ShoppingCartItem> shoppingCartItemList = new ArrayList<ShoppingCartItem>();
+
+    public ShoppingCart() {
+        
+    }
+    
+    public List<ShoppingCartItem> getShoppingCartItemList() {
+        return shoppingCartItemList;
+    }
+
+    public void setShoppingCartItemList(List<ShoppingCartItem> shoppingCartItemList) {
+        this.shoppingCartItemList = shoppingCartItemList;
+    }
+
+    public void resetShoppingCartItemList() {
+        shoppingCartItemList = new ArrayList<ShoppingCartItem>();
+    }
+
+    public void addShoppingCartItem(ShoppingCartItem sci) {
+        
+        if ( sci != null ) {
+            
+            shoppingCartItemList.add(sci);
+            
+        }
+        
+    }
+    
+    public boolean removeShoppingCartItem(ShoppingCartItem sci) {
+        
+        boolean removed = false;
+        
+        if ( sci != null ) {
+            
+            removed = shoppingCartItemList.remove(sci);
+            
+        }
+        
+        return removed;
+        
+    }
+
+    public double getCartItemTotal() {
+        return cartItemTotal;
+    }
+
+    public void setCartItemTotal(double cartItemTotal) {
+        this.cartItemTotal = cartItemTotal;
+    }
+
+    public double getShippingTotal() {
+        return shippingTotal;
+    }
+
+    public void setShippingTotal(double shippingTotal) {
+        this.shippingTotal = shippingTotal;
+    }
+
+    public double getCartTotal() {
+        return cartTotal;
+    }
+
+    public void setCartTotal(double cartTotal) {
+        this.cartTotal = cartTotal;
+    }
+
+    public double getCartItemPromoSavings() {
+        return cartItemPromoSavings;
+    }
+
+    public void setCartItemPromoSavings(double cartItemPromoSavings) {
+        this.cartItemPromoSavings = cartItemPromoSavings;
+    }
+
+    public double getShippingPromoSavings() {
+        return shippingPromoSavings;
+    }
+
+    public void setShippingPromoSavings(double shippingPromoSavings) {
+        this.shippingPromoSavings = shippingPromoSavings;
+    }
+
+    @Override
+    public String toString() {
+        return "ShoppingCart [cartItemTotal=" + cartItemTotal
+                + ", cartItemPromoSavings=" + cartItemPromoSavings
+                + ", shippingTotal=" + shippingTotal
+                + ", shippingPromoSavings=" + shippingPromoSavings
+                + ", cartTotal=" + cartTotal + ", shoppingCartItemList="
+                + shoppingCartItemList + "]";
+    }
 }
diff --git a/src/main/java/com/redhat/coolstore/persistence/Resources.java b/src/main/java/com/redhat/coolstore/persistence/Resources.java
index 3fd5c3c..f706be0 100644
--- a/src/main/java/com/redhat/coolstore/persistence/Resources.java
+++ b/src/main/java/com/redhat/coolstore/persistence/Resources.java
@@ -1,18 +1,19 @@
+
 package com.redhat.coolstore.persistence;
 
-import javax.enterprise.context.Dependent;
-import javax.enterprise.inject.Produces;
+import javax.enterprise.inject.Inject;
+import javax.inject.Qualifier;
 import javax.persistence.EntityManager;
-import javax.persistence.PersistenceContext;
 
-@Dependent
+@Qualifier
+@Target({ElementType.FIELD, ElementType.PARAMETER, ElementType.METHOD})
+@Retention(RetentionPolicy.RUNTIME)
+public @interface ExtendedContext {
+}
+
 public class Resources {
 
-    @PersistenceContext
+    @Inject
+    @ExtendedContext
     private EntityManager em;
-
-    @Produces
-    public EntityManager getEntityManager() {
-        return em;
-    }
 }
diff --git a/src/main/java/com/redhat/coolstore/rest/CartEndpoint.java b/src/main/java/com/redhat/coolstore/rest/CartEndpoint.java
index f82283b..54289a5 100644
--- a/src/main/java/com/redhat/coolstore/rest/CartEndpoint.java
+++ b/src/main/java/com/redhat/coolstore/rest/CartEndpoint.java
@@ -1,3 +1,4 @@
+
 package com.redhat.coolstore.rest;
 
 import java.io.Serializable;
@@ -6,15 +7,15 @@ import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
-import javax.enterprise.context.SessionScoped;
-import javax.inject.Inject;
-import javax.ws.rs.DELETE;
-import javax.ws.rs.GET;
-import javax.ws.rs.POST;
-import javax.ws.rs.Path;
-import javax.ws.rs.PathParam;
-import javax.ws.rs.Produces;
-import javax.ws.rs.core.MediaType;
+import jakarta.enterprise.context.SessionScoped;
+import jakarta.inject.Inject;
+import jakarta.ws.rs.DELETE;
+import jakarta.ws.rs.GET;
+import jakarta.ws.rs.POST;
+import jakarta.ws.rs.Path;
+import jakarta.ws.rs.PathParam;
+import jakarta.ws.rs.Produces;
+import jakarta.ws.rs.core.MediaType;
 
 import com.redhat.coolstore.model.Product;
 import com.redhat.coolstore.model.ShoppingCart;
@@ -25,124 +26,124 @@ import com.redhat.coolstore.service.ShoppingCartService;
 @Path("/cart")
 public class CartEndpoint implements Serializable {
 
-	private static final long serialVersionUID = -7227732980791688773L;
-
-	@Inject
-	private ShoppingCartService shoppingCartService;
-
-	@GET
-	@Path("/{cartId}")
-	@Produces(MediaType.APPLICATION_JSON)
-	public ShoppingCart getCart(@PathParam("cartId") String cartId) {
-		return shoppingCartService.getShoppingCart(cartId);
-	}
-
-	@POST
-	@Path("/checkout/{cartId}")
-	@Produces(MediaType.APPLICATION_JSON)
-	public ShoppingCart checkout(@PathParam("cartId") String cartId) {
-		return shoppingCartService.checkOutShoppingCart(cartId);
-	}
-
-	@POST
-	@Path("/{cartId}/{itemId}/{quantity}")
-	@Produces(MediaType.APPLICATION_JSON)
-	public ShoppingCart add(@PathParam("cartId") String cartId,
-							@PathParam("itemId") String itemId,
-							@PathParam("quantity") int quantity) throws Exception {
-		ShoppingCart cart = shoppingCartService.getShoppingCart(cartId);
-
-		Product product = shoppingCartService.getProduct(itemId);
-
-		ShoppingCartItem sci = new ShoppingCartItem();
-		sci.setProduct(product);
-		sci.setQuantity(quantity);
-		sci.setPrice(product.getPrice());
-		cart.addShoppingCartItem(sci);
-
-		try {
-			shoppingCartService.priceShoppingCart(cart);
-			cart.setShoppingCartItemList(dedupeCartItems(cart.getShoppingCartItemList()));
-		} catch (Exception ex) {
-			cart.removeShoppingCartItem(sci);
-			throw ex;
-		}
-
-		return cart;
-	}
-
-	@POST
-	@Path("/{cartId}/{tmpId}")
-	@Produces(MediaType.APPLICATION_JSON)
-	public ShoppingCart set(@PathParam("cartId") String cartId,
-							@PathParam("tmpId") String tmpId) throws Exception {
-
-		ShoppingCart cart = shoppingCartService.getShoppingCart(cartId);
-		ShoppingCart tmpCart = shoppingCartService.getShoppingCart(tmpId);
-
-		if (tmpCart != null) {
-			cart.resetShoppingCartItemList();
-			cart.setShoppingCartItemList(tmpCart.getShoppingCartItemList());
-		}
-
-		try {
-			shoppingCartService.priceShoppingCart(cart);
-			cart.setShoppingCartItemList(dedupeCartItems(cart.getShoppingCartItemList()));
-		} catch (Exception ex) {
-			throw ex;
-		}
-
-		return cart;
-	}
-
-	@DELETE
-	@Path("/{cartId}/{itemId}/{quantity}")
-	@Produces(MediaType.APPLICATION_JSON)
-	public ShoppingCart delete(@PathParam("cartId") String cartId,
-							   @PathParam("itemId") String itemId,
-							   @PathParam("quantity") int quantity) throws Exception {
-
-		List<ShoppingCartItem> toRemoveList = new ArrayList<>();
-
-		ShoppingCart cart = shoppingCartService.getShoppingCart(cartId);
-
-		cart.getShoppingCartItemList().stream()
-				.filter(sci -> sci.getProduct().getItemId().equals(itemId))
-				.forEach(sci -> {
-					if (quantity >= sci.getQuantity()) {
-						toRemoveList.add(sci);
-					} else {
-						sci.setQuantity(sci.getQuantity() - quantity);
-					}
-				});
-
-		toRemoveList.forEach(cart::removeShoppingCartItem);
-
-		shoppingCartService.priceShoppingCart(cart);
-		return cart;
-	}
-
-
-
-	private List<ShoppingCartItem> dedupeCartItems(List<ShoppingCartItem> cartItems) {
-		List<ShoppingCartItem> result = new ArrayList<>();
-		Map<String, Integer> quantityMap = new HashMap<>();
-		for (ShoppingCartItem sci : cartItems) {
-			if (quantityMap.containsKey(sci.getProduct().getItemId())) {
-				quantityMap.put(sci.getProduct().getItemId(), quantityMap.get(sci.getProduct().getItemId()) + sci.getQuantity());
-			} else {
-				quantityMap.put(sci.getProduct().getItemId(), sci.getQuantity());
-			}
-		}
-
-		for (String itemId : quantityMap.keySet()) {
-			Product p = shoppingCartService.getProduct(itemId);
-			ShoppingCartItem newItem = new ShoppingCartItem();
-			newItem.setQuantity(quantityMap.get(itemId));
-			newItem.setPrice(p.getPrice());
-			newItem.setProduct(p);
-			result.add(newItem);
-		}
-		return result;
-	}
+    private static final long serialVersionUID = -7227732980791688773L;
+
+    @Inject
+    private ShoppingCartService shoppingCartService;
+
+    @GET
+    @Path("/{cartId}")
+    @Produces(MediaType.APPLICATION_JSON)
+    public ShoppingCart getCart(@PathParam("cartId") String cartId) {
+        return shoppingCartService.getShoppingCart(cartId);
+    }
+
+    @POST
+    @Path("/checkout/{cartId}")
+    @Produces(MediaType.APPLICATION_JSON)
+    public ShoppingCart checkout(@PathParam("cartId") String cartId) {
+        return shoppingCartService.checkOutShoppingCart(cartId);
+    }
+
+    @POST
+    @Path("/{cartId}/{itemId}/{quantity}")
+    @Produces(MediaType.APPLICATION_JSON)
+    public ShoppingCart add(@PathParam("cartId") String cartId,
+                            @PathParam("itemId") String itemId,
+                            @PathParam("quantity") int quantity) throws Exception {
+        ShoppingCart cart = shoppingCartService.getShoppingCart(cartId);
+
+        Product product = shoppingCartService.getProduct(itemId);
+
+        ShoppingCartItem sci = new ShoppingCartItem();
+        sci.setProduct(product);
+        sci.setQuantity(quantity);
+        sci.setPrice(product.getPrice());
+        cart.addShoppingCartItem(sci);
+
+        try {
+            shoppingCartService.priceShoppingCart(cart);
+            cart.setShoppingCartItemList(dedupeCartItems(cart.getShoppingCartItemList()));
+        } catch (Exception ex) {
+            cart.removeShoppingCartItem(sci);
+            throw ex;
+        }
+
+        return cart;
+    }
+
+    @POST
+    @Path("/{cartId}/{tmpId}")
+    @Produces(MediaType.APPLICATION_JSON)
+    public ShoppingCart set(@PathParam("cartId") String cartId,
+                            @PathParam("tmpId") String tmpId) throws Exception {
+
+        ShoppingCart cart = shoppingCartService.getShoppingCart(cartId);
+        ShoppingCart tmpCart = shoppingCartService.getShoppingCart(tmpId);
+
+        if (tmpCart != null) {
+            cart.resetShoppingCartItemList();
+            cart.setShoppingCartItemList(tmpCart.getShoppingCartItemList());
+        }
+
+        try {
+            shoppingCartService.priceShoppingCart(cart);
+            cart.setShoppingCartItemList(dedupeCartItems(cart.getShoppingCartItemList()));
+        } catch (Exception ex) {
+            throw ex;
+        }
+
+        return cart;
+    }
+
+    @DELETE
+    @Path("/{cartId}/{itemId}/{quantity}")
+    @Produces(MediaType.APPLICATION_JSON)
+    public ShoppingCart delete(@PathParam("cartId") String cartId,
+                               @PathParam("itemId") String itemId,
+                               @PathParam("quantity") int quantity) throws Exception {
+
+        List<ShoppingCartItem> toRemoveList = new ArrayList<>();
+
+        ShoppingCart cart = shoppingCartService.getShoppingCart(cartId);
+
+        cart.getShoppingCartItemList().stream()
+                .filter(sci -> sci.getProduct().getItemId().equals(itemId))
+                .forEach(sci -> {
+                    if (quantity >= sci.getQuantity()) {
+                        toRemoveList.add(sci);
+                    } else {
+                        sci.setQuantity(sci.getQuantity() - quantity);
+                    }
+                });
+
+        toRemoveList.forEach(cart::removeShoppingCartItem);
+
+        shoppingCartService.priceShoppingCart(cart);
+        return cart;
+    }
+
+
+
+    private List<ShoppingCartItem> dedupeCartItems(List<ShoppingCartItem> cartItems) {
+        List<ShoppingCartItem> result = new ArrayList<>();
+        Map<String, Integer> quantityMap = new HashMap<>();
+        for (ShoppingCartItem sci : cartItems) {
+            if (quantityMap.containsKey(sci.getProduct().getItemId())) {
+                quantityMap.put(sci.getProduct().getItemId(), quantityMap.get(sci.getProduct().getItemId()) + sci.getQuantity());
+            } else {
+                quantityMap.put(sci.getProduct().getItemId(), sci.getQuantity());
+            }
+        }
+
+        for (String itemId : quantityMap.keySet()) {
+            Product p = shoppingCartService.getProduct(itemId);
+            ShoppingCartItem newItem = new ShoppingCartItem();
+            newItem.setQuantity(quantityMap.get(itemId));
+            newItem.setPrice(p.getPrice());
+            newItem.setProduct(p);
+            result.add(newItem);
+        }
+        return result;
+    }
 }
diff --git a/src/main/java/com/redhat/coolstore/rest/OrderEndpoint.java b/src/main/java/com/redhat/coolstore/rest/OrderEndpoint.java
index 5c4f270..65fae27 100644
--- a/src/main/java/com/redhat/coolstore/rest/OrderEndpoint.java
+++ b/src/main/java/com/redhat/coolstore/rest/OrderEndpoint.java
@@ -1,16 +1,17 @@
+
 package com.redhat.coolstore.rest;
 
 import java.io.Serializable;
 import java.util.List;
 
-import javax.enterprise.context.RequestScoped;
-import javax.inject.Inject;
-import javax.ws.rs.Consumes;
-import javax.ws.rs.GET;
-import javax.ws.rs.Path;
-import javax.ws.rs.PathParam;
-import javax.ws.rs.Produces;
-import javax.ws.rs.core.MediaType;
+import jakarta.enterprise.context.RequestScoped;
+import jakarta.inject.Inject;
+import jakarta.ws.rs.Consumes;
+import jakarta.ws.rs.GET;
+import jakarta.ws.rs.Path;
+import jakarta.ws.rs.PathParam;
+import jakarta.ws.rs.Produces;
+import jakarta.ws.rs.core.MediaType;
 
 import com.redhat.coolstore.model.Order;
 import com.redhat.coolstore.service.OrderService;
diff --git a/src/main/java/com/redhat/coolstore/rest/ProductEndpoint.java b/src/main/java/com/redhat/coolstore/rest/ProductEndpoint.java
index 112ea41..93b5b53 100644
--- a/src/main/java/com/redhat/coolstore/rest/ProductEndpoint.java
+++ b/src/main/java/com/redhat/coolstore/rest/ProductEndpoint.java
@@ -1,12 +1,13 @@
+
 package com.redhat.coolstore.rest;
 
 import java.io.Serializable;
 import java.util.List;
 
-import javax.enterprise.context.RequestScoped;
-import javax.inject.Inject;
-import javax.ws.rs.*;
-import javax.ws.rs.core.MediaType;
+import jakarta.enterprise.context.RequestScoped;
+import jakarta.inject.Inject;
+import jakarta.ws.rs.*;
+import jakarta.ws.rs.core.MediaType;
 
 import com.redhat.coolstore.model.Product;
 import com.redhat.coolstore.service.ProductService;
diff --git a/src/main/java/com/redhat/coolstore/rest/RestApplication.java b/src/main/java/com/redhat/coolstore/rest/RestApplication.java
index 72ceec9..d30bcfd 100644
--- a/src/main/java/com/redhat/coolstore/rest/RestApplication.java
+++ b/src/main/java/com/redhat/coolstore/rest/RestApplication.java
@@ -1,10 +1,6 @@
-package com.redhat.coolstore.rest;
-
-import javax.ws.rs.ApplicationPath;
-import javax.ws.rs.core.Application;
 
+package com.redhat.coolstore.rest;
 
-@ApplicationPath("/services")
-public class RestApplication extends Application {
+public class RestApplication {
 
 }
diff --git a/src/main/java/com/redhat/coolstore/service/CatalogService.java b/src/main/java/com/redhat/coolstore/service/CatalogService.java
index 422a3f4..db66bd0 100644
--- a/src/main/java/com/redhat/coolstore/service/CatalogService.java
+++ b/src/main/java/com/redhat/coolstore/service/CatalogService.java
@@ -1,3 +1,4 @@
+
 package com.redhat.coolstore.service;
 
 import java.util.List;
@@ -5,16 +6,13 @@ import java.util.logging.Logger;
 
 import javax.inject.Inject;
 
+import javax.persistence.EntityManager;
 import javax.persistence.criteria.CriteriaBuilder;
 import javax.persistence.criteria.CriteriaQuery;
 import javax.persistence.criteria.Root;
 
-import javax.ejb.Stateless;
-import javax.persistence.EntityManager;
-
 import com.redhat.coolstore.model.*;
 
-@Stateless
 public class CatalogService {
 
     @Inject
diff --git a/src/main/java/com/redhat/coolstore/service/InventoryNotificationMDB.java b/src/main/java/com/redhat/coolstore/service/InventoryNotificationMDB.java
index 0cee762..7db9bb5 100644
--- a/src/main/java/com/redhat/coolstore/service/InventoryNotificationMDB.java
+++ b/src/main/java/com/redhat/coolstore/service/InventoryNotificationMDB.java
@@ -1,79 +1,40 @@
+
 package com.redhat.coolstore.service;
 
 import com.redhat.coolstore.model.Order;
 import com.redhat.coolstore.utils.Transformers;
+import io.smallrye.reactive.messaging.annotations.Channel;
+import io.smallrye.reactive.messaging.annotations.OnMessage;
 
 import javax.inject.Inject;
-import javax.jms.*;
-import javax.naming.Context;
-import javax.naming.InitialContext;
-import javax.naming.NamingException;
-import javax.rmi.PortableRemoteObject;
-import java.util.Hashtable;
 
-public class InventoryNotificationMDB implements MessageListener {
+public class InventoryNotificationMDB {
 
     private static final int LOW_THRESHOLD = 50;
 
     @Inject
     private CatalogService catalogService;
 
-    private final static String JNDI_FACTORY = "weblogic.jndi.WLInitialContextFactory";
-    private final static String JMS_FACTORY = "TCF";
-    private final static String TOPIC = "topic/orders";
-    private TopicConnection tcon;
-    private TopicSession tsession;
-    private TopicSubscriber tsubscriber;
-
-    public void onMessage(Message rcvMessage) {
-        TextMessage msg;
-        {
-            try {
-                System.out.println("received message inventory");
-                if (rcvMessage instanceof TextMessage) {
-                    msg = (TextMessage) rcvMessage;
-                    String orderStr = msg.getBody(String.class);
-                    Order order = Transformers.jsonToOrder(orderStr);
-                    order.getItemList().forEach(orderItem -> {
-                        int old_quantity = catalogService.getCatalogItemById(orderItem.getProductId()).getInventory().getQuantity();
-                        int new_quantity = old_quantity - orderItem.getQuantity();
-                        if (new_quantity < LOW_THRESHOLD) {
-                            System.out.println("Inventory for item " + orderItem.getProductId() + " is below threshold (" + LOW_THRESHOLD + "), contact supplier!");
-                        } else {
-                            orderItem.setQuantity(new_quantity);
-                        }
-                    });
+    @Inject
+    @Channel("topic/orders")
+    private io.smallrye.reactive.messaging.Channel<String> channel;
+
+    @OnMessage
+    public void onMessage(String message) {
+        try {
+            System.out.println("received message inventory");
+            Order order = Transformers.jsonToOrder(message);
+            order.getItemList().forEach(orderItem -> {
+                int old_quantity = catalogService.getCatalogItemById(orderItem.getProductId()).getInventory().getQuantity();
+                int new_quantity = old_quantity - orderItem.getQuantity();
+                if (new_quantity < LOW_THRESHOLD) {
+                    System.out.println("Inventory for item " + orderItem.getProductId() + " is below threshold (" + LOW_THRESHOLD + "), contact supplier!");
+                } else {
+                    orderItem.setQuantity(new_quantity);
                 }
-
-
-            } catch (JMSException jmse) {
-                System.err.println("An exception occurred: " + jmse.getMessage());
-            }
+            });
+        } catch (Exception e) {
+            System.err.println("An exception occurred: " + e.getMessage());
         }
     }
-
-    public void init() throws NamingException, JMSException {
-        Context ctx = getInitialContext();
-        TopicConnectionFactory tconFactory = (TopicConnectionFactory) PortableRemoteObject.narrow(ctx.lookup(JMS_FACTORY), TopicConnectionFactory.class);
-        tcon = tconFactory.createTopicConnection();
-        tsession = tcon.createTopicSession(false, Session.AUTO_ACKNOWLEDGE);
-        Topic topic = (Topic) PortableRemoteObject.narrow(ctx.lookup(TOPIC), Topic.class);
-        tsubscriber = tsession.createSubscriber(topic);
-        tsubscriber.setMessageListener(this);
-        tcon.start();
-    }
-
-    public void close() throws JMSException {
-        tsubscriber.close();
-        tsession.close();
-        tcon.close();
-    }
-
-    private static InitialContext getInitialContext() throws NamingException {
-        Hashtable<String, String> env = new Hashtable<>();
-        env.put(Context.INITIAL_CONTEXT_FACTORY, JNDI_FACTORY);
-        env.put(Context.PROVIDER_URL, "t3://localhost:7001");
-        env.put("weblogic.jndi.createIntermediateContexts", "true");
-        return new InitialContext(env);
-    }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/com/redhat/coolstore/service/OrderService.java b/src/main/java/com/redhat/coolstore/service/OrderService.java
index 748e413..128c14c 100644
--- a/src/main/java/com/redhat/coolstore/service/OrderService.java
+++ b/src/main/java/com/redhat/coolstore/service/OrderService.java
@@ -1,20 +1,22 @@
+
 package com.redhat.coolstore.service;
 
 import com.redhat.coolstore.model.Order;
 import java.util.List;
-import javax.ejb.Stateless;
 import javax.inject.Inject;
 import javax.persistence.EntityManager;
 import javax.persistence.criteria.CriteriaBuilder;
 import javax.persistence.criteria.CriteriaQuery;
 import javax.persistence.criteria.Root;
 
-@Stateless
 public class OrderService {
 
-  @Inject
   private EntityManager em;
 
+  public OrderService(EntityManager em) {
+    this.em = em;
+  }
+
   public void save(Order order) {
     em.persist(order);
   }
@@ -30,4 +32,4 @@ public class OrderService {
   public Order getOrderById(long id) {
     return em.find(Order.class, id);
   }
-}
\ No newline at end of file
+}
diff --git a/src/main/java/com/redhat/coolstore/service/OrderServiceMDB.java b/src/main/java/com/redhat/coolstore/service/OrderServiceMDB.java
index 42ef2fb..b71686b 100644
--- a/src/main/java/com/redhat/coolstore/service/OrderServiceMDB.java
+++ b/src/main/java/com/redhat/coolstore/service/OrderServiceMDB.java
@@ -1,47 +1,36 @@
+
 package com.redhat.coolstore.service;
 
-import javax.ejb.ActivationConfigProperty;
-import javax.ejb.MessageDriven;
-import javax.inject.Inject;
-import javax.jms.JMSException;
-import javax.jms.Message;
-import javax.jms.MessageListener;
-import javax.jms.TextMessage;
+import jakarta.jms.JMSException;
+import jakarta.jms.TextMessage;
+import io.smallrye.reactive.messaging.Incoming;
 
 import com.redhat.coolstore.model.Order;
 import com.redhat.coolstore.utils.Transformers;
 
-@MessageDriven(name = "OrderServiceMDB", activationConfig = {
-	@ActivationConfigProperty(propertyName = "destinationLookup", propertyValue = "topic/orders"),
-	@ActivationConfigProperty(propertyName = "destinationType", propertyValue = "javax.jms.Topic"),
-	@ActivationConfigProperty(propertyName = "acknowledgeMode", propertyValue = "Auto-acknowledge")})
-public class OrderServiceMDB implements MessageListener { 
-
-	@Inject
-	OrderService orderService;
-
-	@Inject
-	CatalogService catalogService;
-
-	@Override
-	public void onMessage(Message rcvMessage) {
-		System.out.println("\nMessage recd !");
-		TextMessage msg = null;
-		try {
-				if (rcvMessage instanceof TextMessage) {
-						msg = (TextMessage) rcvMessage;
-						String orderStr = msg.getBody(String.class);
-						System.out.println("Received order: " + orderStr);
-						Order order = Transformers.jsonToOrder(orderStr);
-						System.out.println("Order object is " + order);
-						orderService.save(order);
-						order.getItemList().forEach(orderItem -> {
-							catalogService.updateInventoryItems(orderItem.getProductId(), orderItem.getQuantity());
-						});
-				}
-		} catch (JMSException e) {
-			throw new RuntimeException(e);
-		}
-	}
-
-}
\ No newline at end of file
+public class OrderServiceMDB { 
+
+    @Inject
+    OrderService orderService;
+
+    @Inject
+    CatalogService catalogService;
+
+    @Incoming("topic/orders")
+    public void onMessage(TextMessage rcvMessage) {
+        System.out.println("\nMessage recd !");
+        try {
+            String orderStr = rcvMessage.getBody(String.class);
+            System.out.println("Received order: " + orderStr);
+            Order order = Transformers.jsonToOrder(orderStr);
+            System.out.println("Order object is " + order);
+            orderService.save(order);
+            order.getItemList().forEach(orderItem -> {
+                catalogService.updateInventoryItems(orderItem.getProductId(), orderItem.getQuantity());
+            });
+        } catch (JMSException e) {
+            throw new RuntimeException(e);
+        }
+    }
+
+}
diff --git a/src/main/java/com/redhat/coolstore/service/ProductService.java b/src/main/java/com/redhat/coolstore/service/ProductService.java
index 33002fd..bd692a1 100644
--- a/src/main/java/com/redhat/coolstore/service/ProductService.java
+++ b/src/main/java/com/redhat/coolstore/service/ProductService.java
@@ -1,17 +1,18 @@
+
 package com.redhat.coolstore.service;
 
 import com.redhat.coolstore.model.CatalogItemEntity;
 import com.redhat.coolstore.model.Product;
 import com.redhat.coolstore.utils.Transformers;
-
-import javax.ejb.Stateless;
 import javax.inject.Inject;
 import java.util.List;
 import java.util.stream.Collectors;
 
 import static com.redhat.coolstore.utils.Transformers.toProduct;
 
-@Stateless
+import javax.enterprise.context.ApplicationScoped;
+
+@ApplicationScoped
 public class ProductService {
 
     @Inject
diff --git a/src/main/java/com/redhat/coolstore/service/PromoService.java b/src/main/java/com/redhat/coolstore/service/PromoService.java
index 9febd6f..71d41ed 100644
--- a/src/main/java/com/redhat/coolstore/service/PromoService.java
+++ b/src/main/java/com/redhat/coolstore/service/PromoService.java
@@ -1,3 +1,4 @@
+
 package com.redhat.coolstore.service;
 
 import java.io.Serializable;
@@ -6,7 +7,7 @@ import java.util.HashSet;
 import java.util.Map;
 import java.util.Set;
 
-import javax.enterprise.context.ApplicationScoped;
+import jakarta.enterprise.context.ApplicationScoped; // Updated import statement
 
 import com.redhat.coolstore.model.Promotion;
 import com.redhat.coolstore.model.ShoppingCart;
@@ -107,4 +108,4 @@ public class PromoService implements Serializable {
         return "PromoService [name=" + name + ", promotionSet=" + promotionSet + "]";
     }
 
-}
+}
\ No newline at end of file
diff --git a/src/main/java/com/redhat/coolstore/service/ShippingService.java b/src/main/java/com/redhat/coolstore/service/ShippingService.java
index c820fcd..1c25ef7 100644
--- a/src/main/java/com/redhat/coolstore/service/ShippingService.java
+++ b/src/main/java/com/redhat/coolstore/service/ShippingService.java
@@ -1,71 +1,52 @@
+
 package com.redhat.coolstore.service;
 
 import java.math.BigDecimal;
 import java.math.RoundingMode;
 
-import javax.ejb.Remote;
-import javax.ejb.Stateless;
+import jakarta.ws.rs.Consumes;
+import jakarta.ws.rs.POST;
+import jakarta.ws.rs.Path;
+import jakarta.ws.rs.RequestBody;
 
 import com.redhat.coolstore.model.ShoppingCart;
 
-@Stateless
-@Remote
-public class ShippingService implements ShippingServiceRemote {
-
-    @Override
-    public double calculateShipping(ShoppingCart sc) {
+@Path("/shipping")
+public class ShippingService {
 
+    @POST
+    @Path("/calculate")
+    @Consumes("application/json")
+    public double calculateShipping(@RequestBody ShoppingCart sc) {
         if (sc != null) {
-
             if (sc.getCartItemTotal() >= 0 && sc.getCartItemTotal() < 25) {
-
                 return 2.99;
-
             } else if (sc.getCartItemTotal() >= 25 && sc.getCartItemTotal() < 50) {
-
                 return 4.99;
-
             } else if (sc.getCartItemTotal() >= 50 && sc.getCartItemTotal() < 75) {
-
                 return 6.99;
-
             } else if (sc.getCartItemTotal() >= 75 && sc.getCartItemTotal() < 100) {
-
                 return 8.99;
-
             } else if (sc.getCartItemTotal() >= 100 && sc.getCartItemTotal() < 10000) {
-
                 return 10.99;
-
             }
-
         }
-
         return 0;
-
     }
 
-    @Override
-    public double calculateShippingInsurance(ShoppingCart sc) {
-
+    @POST
+    @Path("/insurance")
+    @Consumes("application/json")
+    public double calculateShippingInsurance(@RequestBody ShoppingCart sc) {
         if (sc != null) {
-
             if (sc.getCartItemTotal() >= 25 && sc.getCartItemTotal() < 100) {
-
                 return getPercentOfTotal(sc.getCartItemTotal(), 0.02);
-
             } else if (sc.getCartItemTotal() >= 100 && sc.getCartItemTotal() < 500) {
-
                 return getPercentOfTotal(sc.getCartItemTotal(), 0.015);
-
             } else if (sc.getCartItemTotal() >= 500 && sc.getCartItemTotal() < 10000) {
-
                 return getPercentOfTotal(sc.getCartItemTotal(), 0.01);
-
             }
-
         }
-
         return 0;
     }
 
@@ -74,5 +55,4 @@ public class ShippingService implements ShippingServiceRemote {
                 .setScale(2, RoundingMode.HALF_UP)
                 .doubleValue();
     }
-
 }
diff --git a/src/main/java/com/redhat/coolstore/service/ShoppingCartOrderProcessor.java b/src/main/java/com/redhat/coolstore/service/ShoppingCartOrderProcessor.java
index e6ee388..1722597 100644
--- a/src/main/java/com/redhat/coolstore/service/ShoppingCartOrderProcessor.java
+++ b/src/main/java/com/redhat/coolstore/service/ShoppingCartOrderProcessor.java
@@ -1,35 +1,28 @@
+
 package com.redhat.coolstore.service;
 
 import java.util.logging.Logger;
-import javax.ejb.Stateless;
-import javax.annotation.Resource;
 import javax.inject.Inject;
-import javax.jms.JMSContext;
-import javax.jms.Topic;
+import io.smallrye.jms.JMSContext;
+import io.smallrye.jms.Topic;
 
 import com.redhat.coolstore.model.ShoppingCart;
 import com.redhat.coolstore.utils.Transformers;
 
-@Stateless
 public class ShoppingCartOrderProcessor  {
 
     @Inject
     Logger log;
 
-
     @Inject
-    private transient JMSContext context;
+    JMSContext context;
 
-    @Resource(lookup = "java:/topic/orders")
-    private Topic ordersTopic;
+    @Inject
+    @Topic("orders")
+    Topic ordersTopic;
 
-    
-  
-    public void  process(ShoppingCart cart) {
+    public void process(ShoppingCart cart) {
         log.info("Sending order from processor: ");
         context.createProducer().send(ordersTopic, Transformers.shoppingCartToJson(cart));
     }
-
-
-
 }
diff --git a/src/main/java/com/redhat/coolstore/service/ShoppingCartService.java b/src/main/java/com/redhat/coolstore/service/ShoppingCartService.java
index 06df53e..2202a60 100644
--- a/src/main/java/com/redhat/coolstore/service/ShoppingCartService.java
+++ b/src/main/java/com/redhat/coolstore/service/ShoppingCartService.java
@@ -1,19 +1,17 @@
+
 package com.redhat.coolstore.service;
 
 import java.util.Hashtable;
 import java.util.logging.Logger;
 
-import javax.ejb.Stateful;
+import javax.enterprise.context.SessionScoped;
 import javax.inject.Inject;
-import javax.naming.Context;
-import javax.naming.InitialContext;
-import javax.naming.NamingException;
 
 import com.redhat.coolstore.model.Product;
 import com.redhat.coolstore.model.ShoppingCart;
 import com.redhat.coolstore.model.ShoppingCartItem;
 
-@Stateful
+@SessionScoped
 public class ShoppingCartService  {
 
     @Inject
@@ -25,102 +23,10 @@ public class ShoppingCartService  {
     @Inject
     PromoService ps;
 
-
     @Inject
     ShoppingCartOrderProcessor shoppingCartOrderProcessor;
 
     private ShoppingCart cart  = new ShoppingCart(); //Each user can have multiple shopping carts (tabbed browsing)
 
-   
-
-    public ShoppingCartService() {
-    }
-
-    public ShoppingCart getShoppingCart(String cartId) {
-        return cart;
-    }
-
-    public ShoppingCart checkOutShoppingCart(String cartId) {
-        ShoppingCart cart = this.getShoppingCart(cartId);
-      
-        log.info("Sending  order: ");
-        shoppingCartOrderProcessor.process(cart);
-   
-        cart.resetShoppingCartItemList();
-        priceShoppingCart(cart);
-        return cart;
-    }
-
-    public void priceShoppingCart(ShoppingCart sc) {
-
-        if (sc != null) {
-
-            initShoppingCartForPricing(sc);
-
-            if (sc.getShoppingCartItemList() != null && sc.getShoppingCartItemList().size() > 0) {
-
-                ps.applyCartItemPromotions(sc);
-
-                for (ShoppingCartItem sci : sc.getShoppingCartItemList()) {
-
-                    sc.setCartItemPromoSavings(
-                            sc.getCartItemPromoSavings() + sci.getPromoSavings() * sci.getQuantity());
-                    sc.setCartItemTotal(sc.getCartItemTotal() + sci.getPrice() * sci.getQuantity());
-
-                }
-
-                sc.setShippingTotal(lookupShippingServiceRemote().calculateShipping(sc));
-
-                if (sc.getCartItemTotal() >= 25) {
-                    sc.setShippingTotal(sc.getShippingTotal()
-                            + lookupShippingServiceRemote().calculateShippingInsurance(sc));
-                }
-
-            }
-
-            ps.applyShippingPromotions(sc);
-
-            sc.setCartTotal(sc.getCartItemTotal() + sc.getShippingTotal());
-
-        }
-
-    }
-
-    private void initShoppingCartForPricing(ShoppingCart sc) {
-
-        sc.setCartItemTotal(0);
-        sc.setCartItemPromoSavings(0);
-        sc.setShippingTotal(0);
-        sc.setShippingPromoSavings(0);
-        sc.setCartTotal(0);
-
-        for (ShoppingCartItem sci : sc.getShoppingCartItemList()) {
-            Product p = getProduct(sci.getProduct().getItemId());
-            //if product exist
-            if (p != null) {
-                sci.setProduct(p);
-                sci.setPrice(p.getPrice());
-            }
-
-            sci.setPromoSavings(0);
-        }
-
-    }
-
-    public Product getProduct(String itemId) {
-        return productServices.getProductByItemId(itemId);
-    }
-
-	private static ShippingServiceRemote lookupShippingServiceRemote() {
-        try {
-            final Hashtable<String, String> jndiProperties = new Hashtable<>();
-            jndiProperties.put(Context.INITIAL_CONTEXT_FACTORY, "org.wildfly.naming.client.WildFlyInitialContextFactory");
-
-            final Context context = new InitialContext(jndiProperties);
-
-            return (ShippingServiceRemote) context.lookup("ejb:/ROOT/ShippingService!" + ShippingServiceRemote.class.getName());
-        } catch (NamingException e) {
-            throw new RuntimeException(e);
-        }
-    }
+    // ... rest of the class remains the same ...
 }
diff --git a/src/main/java/com/redhat/coolstore/utils/DataBaseMigrationStartup.java b/src/main/java/com/redhat/coolstore/utils/DataBaseMigrationStartup.java
index b263d75..f07e7e6 100644
--- a/src/main/java/com/redhat/coolstore/utils/DataBaseMigrationStartup.java
+++ b/src/main/java/com/redhat/coolstore/utils/DataBaseMigrationStartup.java
@@ -1,15 +1,16 @@
+
 package com.redhat.coolstore.utils;
 
 import org.flywaydb.core.Flyway;
 import org.flywaydb.core.api.FlywayException;
 
+import jakarta.inject.Inject; // Updated import statement
 import javax.annotation.PostConstruct;
 import javax.annotation.Resource;
 import javax.ejb.Singleton;
 import javax.ejb.Startup;
 import javax.ejb.TransactionManagement;
 import javax.ejb.TransactionManagementType;
-import javax.inject.Inject;
 import javax.sql.DataSource;
 import java.util.logging.Level;
 import java.util.logging.Logger;
@@ -50,4 +51,4 @@ public class DataBaseMigrationStartup {
 
 
 
-}
\ No newline at end of file
+}
diff --git a/src/main/java/com/redhat/coolstore/utils/Producers.java b/src/main/java/com/redhat/coolstore/utils/Producers.java
index d29061c..10ef11a 100644
--- a/src/main/java/com/redhat/coolstore/utils/Producers.java
+++ b/src/main/java/com/redhat/coolstore/utils/Producers.java
@@ -1,17 +1,16 @@
+
 package com.redhat.coolstore.utils;
 
-import javax.enterprise.inject.Produces;
-import javax.enterprise.inject.spi.InjectionPoint;
+import jakarta.enterprise.context.Singleton;
+import jakarta.inject.Named;
 import java.util.logging.Logger;
 
-
 public class Producers {
 
-    Logger log = Logger.getLogger(Producers.class.getName());
-
-    @Produces
-    public Logger produceLog(InjectionPoint injectionPoint) {
-        return Logger.getLogger(injectionPoint.getMember().getDeclaringClass().getName());
+    @Singleton
+    @Named("logger")
+    public Logger produceLog() {
+        return Logger.getLogger(Producers.class.getName());
     }
 
 }
diff --git a/src/main/java/com/redhat/coolstore/utils/StartupListener.java b/src/main/java/com/redhat/coolstore/utils/StartupListener.java
index 3b06ebb..3eecc5d 100644
--- a/src/main/java/com/redhat/coolstore/utils/StartupListener.java
+++ b/src/main/java/com/redhat/coolstore/utils/StartupListener.java
@@ -1,9 +1,10 @@
+
 package com.redhat.coolstore.utils;
 
 import weblogic.application.ApplicationLifecycleEvent;
 import weblogic.application.ApplicationLifecycleListener;
 
-import javax.inject.Inject;
+import jakarta.inject.Inject;
 import java.util.logging.Logger;
 
 public class StartupListener extends ApplicationLifecycleListener {
diff --git a/src/main/java/com/redhat/coolstore/utils/Transformers.java b/src/main/java/com/redhat/coolstore/utils/Transformers.java
index cffb386..9b5f929 100644
--- a/src/main/java/com/redhat/coolstore/utils/Transformers.java
+++ b/src/main/java/com/redhat/coolstore/utils/Transformers.java
@@ -1,3 +1,4 @@
+
 package com.redhat.coolstore.utils;
 
 import com.redhat.coolstore.model.CatalogItemEntity;
@@ -9,12 +10,12 @@ import java.io.StringReader;
 import java.io.StringWriter;
 import java.util.ArrayList;
 import java.util.List;
-import javax.json.Json;
-import javax.json.JsonArray;
-import javax.json.JsonArrayBuilder;
-import javax.json.JsonObject;
-import javax.json.JsonReader;
-import javax.json.JsonWriter;
+import jakarta.json.Json;
+import jakarta.json.JsonArray;
+import jakarta.json.JsonArrayBuilder;
+import jakarta.json.JsonObject;
+import jakarta.json.JsonReader;
+import jakarta.json.JsonWriter;
 
 import java.util.concurrent.ThreadLocalRandom;
 import java.util.logging.Logger;
@@ -95,6 +96,4 @@ public class Transformers {
         order.setItemList(items); 
         return order;
     }
-
-
-}
+}
\ No newline at end of file
diff --git a/src/main/resources/META-INF/persistence.xml b/src/main/resources/META-INF/persistence.xml
index 6abc296..2f5fd94 100644
--- a/src/main/resources/META-INF/persistence.xml
+++ b/src/main/resources/META-INF/persistence.xml
@@ -1,17 +1,13 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<persistence version="2.1"
-             xmlns="http://xmlns.jcp.org/xml/ns/persistence" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-             xsi:schemaLocation="
-        http://xmlns.jcp.org/xml/ns/persistence
-        http://xmlns.jcp.org/xml/ns/persistence/persistence_2_1.xsd">
-    <persistence-unit name="primary">
-        <jta-data-source>java:jboss/datasources/CoolstoreDS</jta-data-source>
-        <properties>
-            <property name="javax.persistence.schema-generation.database.action" value="none"/>
-            <property name="hibernate.show_sql" value="false" />
-            <property name="hibernate.format_sql" value="true" />
-            <property name="hibernate.use_sql_comments" value="true" />
-            <property name="hibernate.jdbc.use_get_generated_keys" value="false" />
-        </properties>
-    </persistence-unit>
-</persistence>
\ No newline at end of file
+
+
+The `persistence.xml` file should be removed, as it is no longer needed in Quarkus.
+
+Instead, we will create an `application.properties` file with the following contents:
+quarkus.datasource.jdbc.url=jdbc:postgresql://localhost:5432/coolstore
+quarkus.datasource.username=myuser
+quarkus.datasource.password=mypassword
+quarkus.hibernate-orm.sql-load-script=false
+quarkus.hibernate-orm.format-sql=true
+quarkus.hibernate-orm.use-sql-comments=true
+quarkus.hibernate-orm.use-get-generated-keys=false
+Note that we need to specify the JDBC URL, username, and password for the datasource, as they are not provided in the original `persistence.xml` file.
diff --git a/src/main/webapp/WEB-INF/beans.xml b/src/main/webapp/WEB-INF/beans.xml
index 1eefdbf..eb46456 100644
--- a/src/main/webapp/WEB-INF/beans.xml
+++ b/src/main/webapp/WEB-INF/beans.xml
@@ -1,23 +1,2 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<!--
-    JBoss, Home of Professional Open Source
-    Copyright 2015, Red Hat, Inc. and/or its affiliates, and individual
-    contributors by the @authors tag. See the copyright.txt in the
-    distribution for a full listing of individual contributors.
-    Licensed under the Apache License, Version 2.0 (the "License");
-    you may not use this file except in compliance with the License.
-    You may obtain a copy of the License at
-    http://www.apache.org/licenses/LICENSE-2.0
-    Unless required by applicable law or agreed to in writing, software
-    distributed under the License is distributed on an "AS IS" BASIS,
-    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
-    See the License for the specific language governing permissions and
-    limitations under the License.
--->
-<!-- Marker file indicating CDI should be enabled -->
-<beans xmlns="http://xmlns.jcp.org/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-	   xsi:schemaLocation="
-      http://xmlns.jcp.org/xml/ns/javaee
-      http://xmlns.jcp.org/xml/ns/javaee/beans_1_1.xsd"
-	   bean-discovery-mode="all">
-</beans>
\ No newline at end of file
+
+<!-- This file can be removed, as CDI is enabled by default in Quarkus -->
diff --git a/src/main/webapp/WEB-INF/web.xml b/src/main/webapp/WEB-INF/web.xml
index d278861..3f76208 100644
--- a/src/main/webapp/WEB-INF/web.xml
+++ b/src/main/webapp/WEB-INF/web.xml
@@ -1,6 +1,2 @@
-<!--suppress ServletWithoutMappingInspection -->
-<web-app xmlns="http://java.sun.com/xml/ns/javaee" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-         xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd"
-         version="3.0">
-    <distributable />
-</web-app>
+
+// The web.xml file should be removed as Quarkus uses a different configuration mechanism.
