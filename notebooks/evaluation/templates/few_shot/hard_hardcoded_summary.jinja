{% if model_provider.llama_header %}<s>[INST]You are an AI Assistant trained on migrating enterprise JavaEE code to Quarkus.<<SYS>>{% endif %}
I will give you a JavaEE file for which I want to take one step towards migrating to Quarkus.

I will provide you with static source code analysis information highlighting issues which needs to be addressed.

Wherever available, I will also provide you with a summary of a solution for a similar issue solved in the past.

You can refer to the summary for a pattern of how to update the input Java EE file to Quarkus.

Fix only the problems described. Other problems will be solved in subsequent steps so it is unnecessary to handle them now.

Before attempting to migrate the code to Quarkus, briefly reason through what changes are required and why.

Pay attention to changes you make to imports we need to consider.

Remember when updating or adding annotations that the class must be imported.

After you have shared your step by step thinking, provide a full output of the updated file. Do not omit the contents of the file.

# Input information

## Input File

File name: "ShoppingCartOrderProcessor.java"
Source file contents:
```java
package com.redhat.coolstore.service;

import java.util.logging.Logger;
import javax.ejb.Stateless;
import javax.annotation.Resource;
import javax.inject.Inject;
import javax.jms.JMSContext;
import javax.jms.Topic;

import com.redhat.coolstore.model.ShoppingCart;
import com.redhat.coolstore.utils.Transformers;

@Stateless
public class ShoppingCartOrderProcessor  {

    @Inject
    Logger log;


    @Inject
    private transient JMSContext context;

    @Resource(lookup = "java:/topic/orders")
    private Topic ordersTopic;

    
  
    public void  process(ShoppingCart cart) {
        log.info("Sending order from processor: ");
        context.createProducer().send(ordersTopic, Transformers.shoppingCartToJson(cart));
    }



}

```

## Issues
### incident 0
Line number: 5
Message: Replace the `javax.annotation` import statement with `jakarta.annotation`

### incident 1
Line number: 4
Message: Replace the `javax.ejb` import statement with `jakarta.ejb`

### incident 2
Line number: 6
Message: Replace the `javax.inject` import statement with `jakarta.inject`

### incident 3
Line number: 7
Message: Replace the `javax.jms` import statement with `jakarta.jms`

### incident 4
Line number: 8
Message: Replace the `javax.jms` import statement with `jakarta.jms`

### incident 5
Line number: 13
Message: Stateless EJBs can be converted to a CDI bean by replacing the `@Stateless` annotation with a scope eg `@ApplicationScoped`

### incident 6
Line number: 8
Message: JMS `Topic`s should be replaced with Micrometer `Emitter`s feeding a Channel.
Solution summary:
The migration from JavaEE to Quarkus involved replacing the JMS Topic with a MicroProfile Reactive Messaging Emitter.
JavaEE Implementation: The original code used javax.jms.Topic for messaging, injected via @Resource. The messages were sent using JMSContext.createProducer().send(destination, text).
Quarkus Implementation: The Topic was replaced with a Channel that provides an Emitter<String> in Quarkus. Messages are now sent using emitter.send(messageText).
Overall Adjustment: The messaging logic was adapted to use the MicroProfile Reactive Messaging API instead of JMS, aligning with the reactive, event-driven model in Quarkus. The code now handles both queue and topic messaging uniformly via Emitter<String>.

# Output Instructions
Structure your output exactly in Markdown format such as:

## Reasoning
Write the step by step reasoning in this markdown section. Do not include code in this section, please only include text.

## Updated File
```java
// Write the updated file for Quarkus in this section. If the file should be removed, make the content of the updated file a comment explaining it should be removed.
```

## Additional Information (optional)

If you have any additional details or steps that need to be performed, put it here.

Make sure your output is exactly in the format described above. Pay special attention to markdown sections.

{% if model_provider.model_id == 'mistralai/mixtral-8x7b-instruct-v01' %}
Only use ## to begin section headers in the markdown above. Output the entire file. 
{% endif %}

[/INST]